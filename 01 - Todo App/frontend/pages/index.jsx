import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import {FaBook} from 'react-icons/fa'
import {AiFillDelete} from 'react-icons/ai'
import {RiEdit2Fill}from 'react-icons/ri'
import { useDispatch, useSelector } from 'react-redux'
import { create, deleteTasks, listTasks, update } from '../lib/slices/task'
import { useEffect, useState } from 'react'

const Todo = (props) => {
  const {t,updateCheck, del} = props
  // edit
  const [edit,setEdit]= useState(false)
  const [title,setTitle] = useState(t.title)
  //saveTitle
  const dispatch = useDispatch();
  const saveTitle = async()=>{
    try {
      await dispatch(update({title:title,id:t.id})).unwrap()
      setEdit(false)
    } catch (error) {
      
    }
    
  }
  return (
    <div className="flex justify-between border border-solid border-gray-300 p-4" key={t.id}>
    <div className='flex '>

      {edit ? <><input  value ={title} onChange={(e)=>setTitle(e.target.value)} className='border border-solid border-gray-300 rounded-l-lg flex-grow pl-2 ' placeholder='New Todo '></input>
      <button className="bg-blue-400 active:bg-blue-600 text-white text-lg rounded-r-lg p-2" onClick={()=>saveTitle()}>
        Save
      </button></> : t.title}
  
    </div>
    <div className="flex gap-2 items-center">
      <RiEdit2Fill onClick={()=>setEdit(true)} className='text-amber-500 text-lg'/>
      <AiFillDelete onClick={()=>del(t.id)} className='text-red-400 text-lg'/>
       <input type="checkbox" checked ={t.status == 'done'} onChange={(e)=>updateCheck(t.id,e.target.checked)}></input>
    </div>
  </div>
  )
}

export default function Home() {
  //create
  const [title,setTitle]= useState("")
  
  // redux
  const dispatch = useDispatch();
  const add = async()=>{
    try {
      await dispatch(create({title:title})).unwrap()
    } catch (error) {
      
    }
    
  }
  // list
 const tasks = useSelector(state=>state.taskReducer?.tasks)
 const list =  async()=>{
  try {
    await dispatch(listTasks()).unwrap()
  } catch (error) {
    
  }
  
}
// loading  page => load previous Tasks
useEffect(()=>{
  list()
  console.log("HELLO")

},[])


// delete
const del =  async(id)=>{
  try {
    await dispatch(deleteTasks({id})).unwrap()
  } catch (error) {
    
  }
  
}
// checkbox

const updateCheck =  async(id, checked)=>{
  try {
    await dispatch(update({id, status:checked === true? 'done':'incomplete' })).unwrap()
  } catch (error) {
   
  }
  
}
// filters
const [statusFilter,setStatusFilter] = useState()

  return (
    <div className={styles.container}>
      <Head>
        <title>Todo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="min-h-screen w-full flex flex-col items-strech p-12 gap-6">
        <h1 className={styles.title}>
         ToDo
        </h1>

        <div className="flex flex-col border border-solid border-gray-300 p-4 rounded-lg gap-4">

          <div className='flex'>
          <button className="bg-blue-400 active:bg-blue-600 text-white text-lg rounded-l-lg p-2">
          <FaBook/>
          </button>
          <input  value ={title} onChange={(e)=>setTitle(e.target.value)} className='border border-solid border-gray-300 rounded-r-lg flex-grow pl-2 ' placeholder='New Todo '></input>
          </div>

          <button className="bg-blue-400 active:bg-blue-600 text-white text-lg rounded-lg p-2" onClick={add}>
            Add new task
          </button>
        </div>

        <div className="flex flex-col justify-center items-between gap-3">
          <div className='text-lg font-bold self-center'>Todo List</div>
          <div className="flex justify-around">
            <button className="bg-blue-400 active:bg-blue-600 text-white text-lg rounded-lg p-2 w-[200px] " onClick={()=>setStatusFilter("")}>
              All
            </button>
            <button className="bg-blue-400 active:bg-blue-600 text-white text-lg rounded-lg p-2 w-[200px]" onClick={()=>setStatusFilter("done")}>
              Done
            </button>
            <button className="bg-blue-400 active:bg-blue-600 text-white text-lg rounded-lg p-2 w-[200px]" onClick={()=>setStatusFilter("incomplete")}>
             Incomplete
            </button>
          </div>
        </div>


        <div className='flex flex-col gap-4 '>
          {/* If statusFilter is null => show all items */}
          {/* else only show items whose status is equal to statusFilter */}
          {(statusFilter ? tasks.filter(item=> item.status == statusFilter) : tasks).map((t)=> <Todo updateCheck={updateCheck} del={del} t={t} key={t.id}/> )}
          {/* OR */}
        {/* {tasks.filter(item=> statusFilter ? item.status == statusFilter : true).map((t)=> <Todo updateCheck={updateCheck} del={del} t={t} key={t.id}/> )} */}

        </div>
        
        <div className='flex flex-row gap-4 '>
          
            <button className="flex-grow bg-red-400 active:bg-red-600 text-white text-lg rounded-lg p-2" onClick={()=>tasks.filter(item=>item.status =='done').forEach(p => del(p.id))}>
              Delete Done Tasks
            </button>
            <button className="flex-grow bg-red-400 active:bg-red-600 text-white text-lg rounded-lg p-2" onClick={()=>tasks.filter(item=>item.status =='incomplete').forEach(p => del(p.id))}>
              Delete Incomplete Tasks
            </button>
            <button className="flex-grow bg-red-400 active:bg-red-600 text-white text-lg rounded-lg p-2" onClick={()=>tasks.forEach(p => del(p.id))}>
            Delete All Tasks
            </button>

        </div>
        
       
      </main>

      <footer className={styles.footer}>
      by "z"
      </footer>
    </div>
  )
}
